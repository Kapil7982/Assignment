package com.curd.tests;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.curd.models.Product;
import com.curd.repositories.ProductRepository;
import com.curd.services.ProductService;

public class ProductServiceTest {

    @Mock
    private ProductRepository productRepository;

    @InjectMocks
    private ProductService productService;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetAllProducts() {
        List<Product> productList = new ArrayList<>();
        productList.add(new Product(1L, "Product A", 29.99, null, null, null));
        productList.add(new Product(2L, "Product B", 39.99, null, null, null));

        when(productRepository.findAll()).thenReturn(productList);

        List<Product> result = productService.getAllProducts();

        assertEquals(2, result.size());
        assertEquals("Product A", result.get(0).getName());
        assertEquals("Product B", result.get(1).getName());
    }

    @Test
    public void testGetProductById() {
        Product product = new Product(1L, "Product A", 29.99, null, null, null);

        when(productRepository.findById(1L)).thenReturn(Optional.of(product));

        Product result = productService.getProductById(1L);

        assertNotNull(result);
        assertEquals("Product A", result.getName());
    }

    @Test
    public void testGetProductById_NotFound() {
        when(productRepository.findById(1L)).thenReturn(Optional.empty());

        Product result = productService.getProductById(1L);

        assertNull(result);
    }

    @Test
    public void testAddProduct() {
        Product productToAdd = new Product(null, "New Product", 19.99, null, null, null);

        Product productAdded = new Product(1L, "New Product", 19.99, null, null, null);

        when(productRepository.save(any(Product.class))).thenReturn(productAdded);

        Product result = productService.addProduct(productToAdd);

        assertNotNull(result);
        assertEquals(1L, result.getId());
        assertEquals("New Product", result.getName());
        assertEquals(19.99, result.getPrice());
    }

}
